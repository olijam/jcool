#!/usr/bin/perl
use strict;
use Text::CSV;
use JSON::XS;
use FindBin qw/$Bin/;
use lib "$Bin/lib";
use ParseOpts qw/%Opts/;

$Opts{lookup} ||= "$ENV{HOME}/data/lookup/db.json";

open(my $fh, $Opts{lookup}) || die "Can't find $Opts{lookup}: $!";
my $Lookup = decode_json(<$fh>);
close $fh;

my @FIELDS = qw/
day_id hour_id 
campaign_id ad_id 
domain_id 
country_id region_id metro_id 
keyword_id 
context_id 
exchange_id 
search_data_provider_id
demographi_data_provider_id
ad_position_id 
recency_id 
nth_view
bid_price 
clearing_price 
total_cust_cost
total_sifi_cost 
impressions 
clicks 
label_id 
data_center_id 
age_id
gender_id
label_src_id
search_term_cost 
segment_cost 
demo_cost 
orginal_clearing_price
rebated_clearing_price 
ip 
conversion_category 
conversion_type 
financial_reward 
sifi_uid
time
keyword_type
/;

my @KEEP_FIELDS = qw/
day_id hour_id time
campaign_id ad_id 
domain_id 
metro_id 
keyword_id 
context_id 
exchange_id 
ad_position_id 
recency_id 
impressions 
clicks 
conversion_category 
conversion_type
sifi_uid
age_id
gender_id
bid_price
clearing_price
total_cust_cost
total_sifi_cost
financial_reward
/;

my $CSV = Text::CSV->new({binary=>1});
my $CSV_FH = \*STDOUT;

my $i=0;my %h_idx; map{$h_idx{$_} = $i++} @FIELDS;
my @a_idx; map{push(@a_idx,$h_idx{$_})} @KEEP_FIELDS;
# Prepare the header
my @header = @KEEP_FIELDS;
for(my $i=0;$i<=$#header;$i++) { 
  if($Lookup->{$header[$i]}) {
    my @tmp = @{$Lookup->{$header[$i]}{fields}};
    splice(@header,$i,1,@tmp);
    $i += $#tmp; # Don't need the recursive action
  }
  splice(@header,$i,1,("time","date","wday","tday")) if($header[$i] eq 'time');

}
my $i=0;my %b_idx; map{$b_idx{$_} = $i++} @header;

$CSV->print($CSV_FH,\@header); print $CSV_FH "\n";

#my $cnt;
while(<>) {
  chomp;
  my @a = (split(',',$_))[@a_idx];
  my @b;
  map {
    my $i = $_;
    if($Lookup->{$KEEP_FIELDS[$i]}) {
      push(@b, $Lookup->{$KEEP_FIELDS[$i]}{$a[$i]} ? 
        @{$Lookup->{$KEEP_FIELDS[$i]}{$a[$i]}} : 
        (map {$a[$i]} @{$Lookup->{$KEEP_FIELDS[$i]}{fields}}));
    } else {
      push(@b,$a[$i]);
    }
  } 0..$#a;
  splice(@b,$b_idx{time},1,&parse_time($b[$b_idx{time}]));
    
  $CSV->print($CSV_FH,\@b); print $CSV_FH "\n";
#  last if($cnt++ > 10000);
}

sub parse_time {
  my $t = shift;
  my($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime($t);

  my $date = sprintf("%4.4d-%2.2d-%2.2d",$year+1900,$mon+1,$mday);
  my $Wday = ("Sun","Mon","Tue","Wed","Thu","Fri","Sat")[$wday];
  my $Tday = ("Wend","Wday","Wday","Wday","Wday","Wday","Wend")[$wday];

  return($t,$date,$Wday,$Tday);
}
