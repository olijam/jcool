#!/usr/bin/perl
use strict;
use DBI;
use DBD::Pg qw/:async/;
use Text::CSV;

my $DB_NAME = 'simplifi-live';
#my $DB_HOST = 'db2-int';
my $DB_HOST = 'cs36-int';
my %SQL;
my %Lookup;
my $CSV = Text::CSV->new({binary=>1});
my $CSV_FH = \*STDOUT;

my @FIELDS = qw/
day_id hour_id 
campaign_id ad_id 
domain_id 
country_id region_id metro_id 
keyword_id 
context_id 
exchange_id 
sifi1 sifi2 
ad_position_id 
recency_id 
sifi3 
bid_price 
clearing_price 
total_cust 
total_sifi_cost 
impressions 
clicks 
label_id 
data_center_id 
sifi4 sifi5 sifi6 
search_term_cost 
segment_cost 
demo_cost 
sifi7 
rebat_clearing_price 
ip 
conversion_category 
conversion_type 
financial_reward 
sifi_uid
time/;

my @KEEP_FIELDS = qw/
day_id hour_id time
campaign_id ad_id 
domain_id 
metro_id 
keyword_id 
context_id 
exchange_id 
ad_position_id 
recency_id 
impressions 
clicks 
conversion_category 
conversion_type/;

$SQL{domain_id} = <<SQL_DOMAINS;
select
  md5 as domain_id,
  lower(substring(name,E'https?:\/\/([^\/\?]+)')) as domain
from domains2
SQL_DOMAINS

$SQL{metro_id} = <<SQL_METROS;
select 
  m.id as metro_id,
  m.name || ' ' || r.geo_code || ' ' || c.geo_code as metro_name, 
  r.name || ' ' || c.geo_code as region_name, 
  c.name as country_name,
  d.name || ' (' || m.dma_code || ')' as dma_code 
from geo_targets2 m, geo_targets2 r, geo_targets2 c, dmas d
where 
  m.parent_id = r.id and 
  r.country_id = c.id and
  m.dma_code = d.code
SQL_METROS

# Yes campaign_id is there twice
$SQL{campaign_id} = <<SQL_CAMPAIGNS;
select
  camp.id as campaign_id,
  camp.name || ' (' || camp.id || ')' as campaign_name,
--  camp.start_date as start_date,
--  camp.end_date as end_date,
--  camp.max_bid as max_bid,
  camp.daily_budget as daily_budget,
--  camp.total_budget as total_budget,
  comp.name as company_name,
  adv.name as advertiser_name,
  ctype.name as cost_type,
  adx_cat.name as adx_category,
  adx_prod.name as adx_product,
--  openx_cat.name as openx_category,
--  openx_cre.name as openx_attribute,
--  openx_type.name as openx_type,
--  rubi.name as rubicon_category,
--  cweb.name as contextweb_category,
--  lijit.name as lijit_category,
--  adbrite.name as adbrite_category,
  sifi_prod.name as sifi_product_category,
--  sifi_sen.name as sifi_sensative_category,
  camp_type.name as campaign_type,
  goal.goal_type as goal
from campaigns camp
  left join companies comp on
    camp.company_id = comp.id
  left join advertisers adv on
    camp.advertiser_id = adv.id
  left join cost_types ctype on
    camp.cost_type_id = ctype.id
  left join adx_categories adx_cat on
    camp.adx_category_id = adx_cat.id
  left join adx_product_categories adx_prod on
    camp.adx_product_category_id = adx_prod.id
  left join openx_categories openx_cat on
    camp.openx_category_id = openx_cat.id
  left join openx_creative_attributes openx_cre on
    camp.openx_creative_attribute_id = openx_cre.id
  left join openx_creative_types openx_type on
    camp.openx_creative_type_id = openx_type.id
  left join rubicon_categories rubi on
    camp.rubicon_category_id = rubi.id
  left join contextweb_categories cweb on
    camp.contextweb_category_id = cweb.id
  left join lijit_categories lijit on
    camp.lijit_category_id = lijit.id
  left join adbrite_categories adbrite on
    camp.adbrite_category_id = adbrite.id
  left join sifi_product_categories sifi_prod on
    camp.sifi_product_category_id = sifi_prod.id
  left join sifi_sensitive_categories sifi_sen on
    camp.sifi_sensitive_category_id = sifi_sen.id
  left join campaign_types camp_type on
    camp.campaign_type_id = camp_type.id
  left join campaign_goals goal on
    camp.id = goal.campaign_id
SQL_CAMPAIGNS

$SQL{ad_id} = <<SQL_ADS;
select
  ad.id as ad_id,
  ad.id as ad_id,
  ad_size.width || 'x' || ad_size.height as ad_size,
  lower(substring(ad.target_url,E'https?:\/\/([^\/\?]+)')) as ad_service_domain,
  file_type.name as ad_file_type,
  ad.primary_creative_content_type as ad_content_type1,
  ad.secondary_creative_content_type as ad_content_type2
from ads ad
  left join ad_sizes ad_size on
    ad.ad_size_id = ad_size.id
  left join ad_positions ad_pos on
    ad.ad_position_id = ad_pos.id
  left join ad_file_types file_type on
    ad.ad_file_type_id = file_type.id
SQL_ADS

# Consider url uncoding
$SQL{keyword_id} = <<SQL_KEYWORDS;
select
  md5 as keyword_id,
  regexp_replace(
    regexp_replace(
      regexp_replace(name,E'(%[0-9a-f]{2}(quot)?)+','+','gi'),
      E'[+]{2,}','+','g'),
    E'^[+]|[+]\$','','g')
    as keywords
from keywords
SQL_KEYWORDS

$SQL{context_id} = <<SQL_CONTEXTS;
select
  c.id as context_id,
  c.name as context_l1,
  p.name as context_l2
from contexts c
  left join contexts p on
    c.parent_id = p.id
SQL_CONTEXTS

$SQL{exchange_id} = <<SQL_EXCHANGES;
select
  id as exchange_id,
  name as exchange
from exchanges
SQL_EXCHANGES

$SQL{recency_id} = <<SQL_RECENCIES;
select
  id as recency_id,
  name as recency
from recencies
SQL_RECENCIES

$SQL{ad_position_id} = <<SQL_AD_POSITIONS;
select
  id as ad_position_id,
  name as ad_position
from ad_positions
SQL_AD_POSITIONS

my $dbh = DBI->connect("dbi:Pg:dbname=$DB_NAME;host=$DB_HOST",'','',{AutoCommit=>0,RaiseError=>1});

# Load the Lookup hash
foreach my $key (keys %SQL) {
  my $sth = $dbh->prepare($SQL{$key});
  $sth->execute;
  my $f = $sth->{NAME_lc};
  map{$Lookup{$key}{fields}[$_-1] = $f->[$_]} 1..$#$f;
  while(my $a = $sth->fetchrow_arrayref) {
    map{$Lookup{$key}{$a->[0]}[$_-1] = $a->[$_]} 1..$#$a;
  }
  $sth->finish;
}
$dbh->disconnect;

my $i=0;my %h_idx; map{$h_idx{$_} = $i++} @FIELDS;
my @a_idx; map{push(@a_idx,$h_idx{$_})} @KEEP_FIELDS;
# Prepare the header
my @header = @KEEP_FIELDS;
for(my $i=0;$i<=$#header;$i++) { 
  if($Lookup{$header[$i]}) {
    my @tmp = @{$Lookup{$header[$i]}{fields}};
    splice(@header,$i,1,@tmp);
    $i += $#tmp; # Don't need the recursive action
  }
  splice(@header,$i,1,("date","wday","tday")) if($header[$i] eq 'time');

}
$CSV->print($CSV_FH,\@header); print $CSV_FH "\n";

my $TIME_IDX = 2;
#my $cnt;
while(<>) {
  chomp;
  my @a = (split(',',$_))[@a_idx];
  my @b;
  map {
    my $i = $_;
    if($Lookup{$KEEP_FIELDS[$i]}) {
      push(@b, $Lookup{$KEEP_FIELDS[$i]}{$a[$i]} ? 
        @{$Lookup{$KEEP_FIELDS[$i]}{$a[$i]}} : 
        (map {$a[$i]} @{$Lookup{$KEEP_FIELDS[$i]}{fields}}));
    } else {
      push(@b,$a[$i]);
    }
  } 0..$#a;
  splice(@b,$TIME_IDX,1,&parse_time($b[$TIME_IDX]));
    
  $CSV->print($CSV_FH,\@b); print $CSV_FH "\n";
#  last if($cnt++ > 10000);
}

sub parse_time {
  my $t = shift;
  my($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime($t);

  my $date = sprintf("%4.4d-%2.2d-%2.2d",$year+1900,$mon+1,$mday);
  my $Wday = ("Sun","Mon","Tue","Wed","Thu","Fri","Sat")[$wday];
  my $Tday = ("Wend","Wday","Wday","Wday","Wday","Wday","Wend")[$wday];

  return($date,$Wday,$Tday);
}
