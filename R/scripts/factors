#!/usr/local/bin/Rscript --no-save
options(warn=-1)
options(stringsAsFactors=FALSE)
options(gsubfn.engine="R")

# Defaults
THREADS    <- 6
ITERATIONS <- 60
VARS       <- 17
THRESHOLD  <- 1e5
BANFF_DIR  <- "/data2/banff_by_day_and_campaign"
UNZIPPER   <- "xz -dc"
ZIPPER     <- "xz -4"
ENV        <- as.list(Sys.getenv())
PARSER     <- sprintf("%s/bin/banff_parser",ENV$HOME)

library(Rminfo)

args <- commandArgs(trailingOnly=TRUE)

opts <- args[grep("^--",args)]
names(opts) <- sub("^--([\\w.]+)=?.*","\\1",opts,perl=TRUE)
opts[grep("=",opts,invert=TRUE)] <- 1
r <- grep("=",opts); opts[r] <- sub("(.*)?=(.*)","\\2",opts[r])
opts <- as.list(opts)

opts$name       <- if(is.null(opts$name))      ""          else opts$name
opts$threads    <- if(is.null(opts$threads))    THREADS    else opts$threads
opts$iterations <- if(is.null(opts$iterations)) ITERATIONS else opts$iterations
opts$vars       <- if(is.null(opts$vars))       VARS       else opts$vars
opts$memory.db  <- if(is.null(opts$memory.db))  NULL       else opts$memory.db


r <- grep("^--",args)
campaigns <- if(length(r) > 0) args[-r] else args
if(length(campaigns) == 0) stop("No campaigns to process!")

if(!is.null(opts$after.date)) {
  after.day_id <- as.numeric(as.Date(opts$after.date) - as.Date("2000-01-01"))
  today.day_id <- as.numeric(Sys.Date() - as.Date("2000-01-01"))
  days = sprintf("{%d..%d}", after.day_id, today.day_id)
} else days = "*"

ivar_cols <- c(
  "hour_id",
#  "date",
#  "wday",
#  "tday",
  "campaign_name",
  "daily_budget",
  "company_name",
  "advertiser_name",
  "cost_type",
  "adx_category",
  "adx_product",
  "campaign_type",
  "ad_size",
  "ad_position",
  "ad_service_domain",
  "ad_file_type",
  "ad_content_type1",
  "ad_content_type2",
  "recency",
  "domain",
  "metro_name",
  "region_name",
  "country_name",
  "dma_code",
  "keywords",
  "context_l1",
  "context_l2",
  "exchange",
  "age",
  "gender")

for(f in campaigns) {
  recs <- Rminfo$new(
    filter=sprintf("%s %s/%s/%s.xz 2>/dev/null | %s", UNZIPPER, BANFF_DIR, days, f, PARSER),
    memory.db=opts$memory.db)
  recs$df$converts <- as.character(as.integer(as.numeric(recs$df$conversion_category) > 0))
  gc()

#  STATE <- if(length(grep('cpa',recs$df$goal,invert=TRUE,fixed=TRUE))>0) "clicks" else "converts"
  STATE <- "clicks"
  SAMPLE_FACTOR <- 1e5/nrow(recs$df)
  SAMPLE_FACTOR <- if(SAMPLE_FACTOR > 0.80) 0.80 else SAMPLE_FACTOR
  SAMPLE_FACTOR <- if(SAMPLE_FACTOR < 0.20) 0.20 else SAMPLE_FACTOR

  cat(sprintf("%s rows %d, SAMPLE_FACTOR %.3f%%, STATE %s\n",
      f,
      nrow(recs$df),
      100 * SAMPLE_FACTOR, STATE),
    file=stderr())
  if(nrow(recs$df) < THRESHOLD) {
    cat(sprintf("Campaign %s impressions %d, no factors -- not enough impressions\n", f, nrow(recs$df)))
    next
  }

  pres <- recs$factors(
    svar=STATE,
    ivars=ivar_cols,
    threads=opts$threads,
    iterations=opts$iterations,
    vars=opts$vars,
    samples=nrow(recs$df) * SAMPLE_FACTOR,
    verbose=1
  )

  t <- data.frame()

  for(i in 1:length(pres)) t <- rbind(t,pres[[i]])
  t <- t[t$pos > 0,]

  t2 <- aggregate(cbind(1,pos,minfo,cells) ~ factor + level, data=t, sum)
  t2$pos   <- t2$pos/t2$"1"
  t2$minfo <- t2$minfo/t2$"1"
  t2$cells <- t2$cells/t2$"1"

  t2$impressions <- 1
  t2$clicks      <- 1
  t2$ctr         <- 1

  for(i in 1:nrow(t2)) {
    r <- which(recs$df[,t2$factor[i]] == t2$level[i])
    t2$impressions[i] <-  sum(as.numeric(recs$df$impressions[r]))
    t2$clicks[i]      <-  sum(as.numeric(recs$df$clicks[r]))
    t2$ctr[i]         <- t2$clicks[i] / t2$impressions[i]
    t2$converts[i]    <-  sum(as.numeric(recs$df$converts[r]))
    t2$atr[i]         <- t2$converts[i] / t2$impressions[i]
  }

  clicks      <- sum(as.numeric(recs$df$clicks))
  impressions <- sum(as.numeric(recs$df$impressions))
  converts    <- sum(as.numeric(recs$df$converts))

  ave_ctr <- clicks   / impressions
  ave_atr <- converts / impressions
  levels <- 0
  for(v in ivar_cols) levels <- levels + length(unique(recs$df[,v]))
  t2 <- rbind(t2,
    cbind(
      factor=sprintf("aa ALL: %d total factors",length(ivar_cols)),
      level=sprintf("aa ALL: %d total levels",levels),
      "1"=opts$iterations,
      pos=0,
      minfo=1,
      cells=0,
      impressions=impressions,
      clicks=clicks,
      ctr=ave_ctr,
      converts=converts,
      atr=ave_atr
    ))

  t2$gb <- "Average"
  if(STATE == "clicks") {
    t2$gb[t2$ctr > ave_ctr] <- "Good"
    t2$gb[t2$ctr < ave_ctr] <- "Bad"
  } else {
    t2$gb[t2$atr > ave_atr] <- "Good"
    t2$gb[t2$atr < ave_atr] <- "Bad"
  }

  o <- if(STATE == "clicks") 
    order(t2$factor,t2$ctr,decreasing=TRUE) else 
    order(t2$factor,t2$atr,decreasing=TRUE)
  n <- c("gb","factor","level","impressions","clicks","ctr","converts","atr","1","pos","minfo","cells")

  fp <- unlist(strsplit(f,'.',fixed=TRUE))
  write.csv(t2[o,n],file=stdout(),row.names=FALSE)
}
